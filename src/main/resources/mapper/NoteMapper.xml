<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.springStarter.mapper.NoteMapper">

    <resultMap id="noteResultMap" type="com.study.springStarter.dto.Note">
        <id property="noteId" column="noteId"/>
        <result property="userId" column="userId"/>
        <result property="folderId" column="folderId"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="isPinned" column="isPinned"/>
        <result property="createdDate" column="createdDate"/>
        <result property="updatedDate" column="updatedDate"/>
        <result property="markdown_enabled" column="markdown_enabled"/>
    </resultMap>

    <insert id="insertNote" parameterType="com.study.springStarter.dto.Note" useGeneratedKeys="true" keyProperty="noteId">
        insert into note(userId, folderId, title, content, isPinned, markdown_enabled)
        values(#{userId}, #{folderId}, #{title}, #{content}, #{isPinned}, #{markdown_enabled})
    </insert>

    <select id="selectNoteById" resultMap="noteResultMap">
        select noteId, userId, folderId, title, content, isPinned,
               createdDate, updatedDate, markdown_enabled from note
        where noteId= #{noteId} AND userId = #{userId}
    </select>

    <select id="selectNotesByUserId" resultMap="noteResultMap">
        select noteId, userId, folderId, title, content, isPinned,
               createdDate, updatedDate, markdown_enabled from note
        where userId = #{userId}
        ORDER BY isPinned DESC, updatedDate DESC, createdDate DESC
    </select>

    <select id="selectNotesByFolderId" resultMap="noteResultMap">
        select noteId, userId, folderId, title, content, isPinned,
               createdDate, updatedDate, markdown_enabled from note
        where folderId = #{folderId} AND userId = #{userId}
        ORDER BY isPinned DESC, updatedDate DESC, createdDate DESC
    </select>

    <select id="selectPinnedNotes" resultMap="noteResultMap">
        select noteId, userId, folderId, title, content, isPinned,
               createdDate, updatedDate, markdown_enabled from note
        where userId = #{userId} and isPinned = true
        ORDER BY updatedDate DESC, createdDate DESC
    </select>

    <update id="updateNote" parameterType="com.study.springStarter.dto.Note">
        update note set folderId = #{folderId},
                        title = #{title}, content = #{content}, isPinned = #{isPinned},
                        markdown_enabled = #{markdown_enabled}, updatedDate = NOW()
        where noteId = #{noteId} AND userId = #{userId}
    </update>

    <delete id="deleteNote">
        delete from note where noteId = #{noteId} AND userId = #{userId}
    </delete>

    <select id="searchAndFilterAndSortNotes" resultMap="noteResultMap">
        SELECT noteId, userId, folderId, title, content, isPinned, createdDate, updatedDate, markdown_enabled
        FROM note
        WHERE userId = #{userId}
        <if test="condition.keyword != null and condition.keyword != ''">
            AND (title LIKE CONCAT('%', #{condition.keyword}, '%') OR content LIKE CONCAT('%', #{condition.keyword}, '%'))
        </if>
        <if test="condition.folderId != null">
            AND folderId = #{condition.folderId}
        </if>
        <if test="condition.isPinned != null">
            AND isPinned = #{condition.isPinned}
        </if>
        <choose>
            <when test="condition.sortBy == 'createdDate'">
                ORDER BY isPinned DESC, createdDate
            </when>
            <when test="condition.sortBy == 'updatedDate'">
                ORDER BY isPinned DESC, updatedDate
            </when>
            <when test="condition.sortBy == 'title'">
                ORDER BY isPinned DESC, title
            </when>
            <otherwise>
                ORDER BY isPinned DESC, createdDate
            </otherwise>
        </choose>
        <if test="condition.sortOrder == 'desc'">
            DESC
        </if>
        <if test="condition.sortOrder == 'asc'">
            ASC
        </if>

        LIMIT #{condition.offset}, #{condition.pageSize}
    </select>

    <!-- 노트 목록 검색 + 페이징 -->
    <select id="search" resultType="Note">
        SELECT * FROM note
        <where>
            userId = #{userId}
            <if test="keyword != null and keyword != ''">
                AND title LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="folderId != null">
                AND folderId = #{folderId}
            </if>
            <if test="pinned != null">
                AND pinned = #{pinned}
            </if>
            <if test="startDate != null and endDate != null">
                AND created_at BETWEEN #{startDate} AND #{endDate}
            </if>
        </where>
        ORDER BY isPinned DESC, noteId DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 노트 목록 개수 조회 -->
    <select id="count" resultType="int">
        SELECT COUNT(*) FROM note
        <where>
            userId = #{userId}
            <if test="keyword != null and keyword != ''">
                AND title LIKE CONCAT('%', #{keyword}, '%')
            </if>
            <if test="folderId != null">
                AND folderId = #{folderId}
            </if>
            <if test="pinned != null">
                AND pinned = #{pinned}
            </if>
            <if test="startDate != null and endDate != null">
                AND created_at BETWEEN #{startDate} AND #{endDate}
            </if>
        </where>
    </select>

</mapper>